import numpy as np
import matplotlib.pyplot as plt
import skfuzzy as fuzz
from scipy.integrate import odeint
from skfuzzy import control as ctrl

# Define fuzzy variables for error and change in error
error = ctrl.Antecedent(np.linspace(-10, 10, 500), 'error')
change_in_error = ctrl.Antecedent(np.linspace(-10, 10, 500), 'change_in_error')

# Output variable - control adjustment
control_adjustment = ctrl.Consequent(np.linspace(-10, 10, 500), 'control_adjustment')

# Membership functions for fuzzy variables
error.automf(3)
change_in_error.automf(3)
control_adjustment.automf(3)

# Define fuzzy rules
rule1 = ctrl.Rule(error['poor'] | change_in_error['poor'], control_adjustment['good'])
rule2 = ctrl.Rule(error['average'] | change_in_error['average'], control_adjustment['average'])
rule3 = ctrl.Rule(error['good'] | change_in_error['good'], control_adjustment['poor'])

# Control system
control_system = ctrl.ControlSystem([rule1, rule2, rule3])
control_simulation = ctrl.ControlSystemSimulation(control_system)

# Function to define system dynamics
def system_dynamics(x, t, u):
    A = np.array([[0, 1], [-2, -3]])  # System matrix
    B = np.array([0, 1])             # Input matrix
    dxdt = A @ x + B * u
    return dxdt

# Sliding mode controller with fuzzy logic
def fuzzy_sliding_mode_control(x, r, t, u_prev):
    # Controller parameters
    k = 2.0  # Control gain
    lambda_ = 2.0  # Sliding surface slope

    # Sliding surface
    s = lambda_ * (x[0] - r[0]) + (x[1] - r[1])

    # Error and change in error for fuzzy logic
    e = x[0] - r[0]
    de = x[1] - r[1]

    # Fuzzy logic control
    control_simulation.input['error'] = e
    control_simulation.input['change_in_error'] = de
    control_simulation.compute()
    fuzzy_adjustment = control_simulation.output['control_adjustment']

    # Control law with fuzzy adjustment
    u = -k * np.sign(s) + fuzzy_adjustment
    return u

# Time vector
t = np.linspace(0, 10, 1000)

# Initial conditions
x0 = np.array([0, 0])
r0 = np.array([1, 0])  # Desired initial condition

# Simulate system with fuzzy sliding mode control
x = np.zeros((len(t), 2))
u = np.zeros_like(t)
for i in range(1, len(t)):
    dt = t[i] - t[i - 1]
    u[i] = fuzzy_sliding_mode_control(x[i - 1], r0, t[i], u[i - 1])
    x[i] = x[i - 1] + dt * system_dynamics(x[i - 1], t[i], u[i])

# Plotting
plt.figure(figsize=(12, 8))

# Plot system response
plt.subplot(2, 1, 1)
plt.plot(t, x[:,0], 'b-', label='System Response')
plt.ylabel('Position')
plt.title('System Response with Fuzzy Sliding Mode Control')
plt.legend()

# Plot control signal
plt.subplot(2, 1, 2)
plt.plot(t, u, 'k-', label='Control Signal')
plt.xlabel('Time')
plt.ylabel('Control')
plt.title('Control Signal')
plt.legend()

plt.tight_layout()
plt.show()
