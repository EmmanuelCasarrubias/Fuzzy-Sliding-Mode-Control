import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import odeint
import skfuzzy as fuzz
from skfuzzy import control as ctrl

# Definición de la dinámica del sistema (sistema de segundo orden)
def system_dynamics(x, t, u):
    A = np.array([[0, 1], [-2, -1]])
    B = np.array([0, 1])
    dxdt = A @ x + B * u
    return dxdt

# Función para actualizar las reglas y funciones de membresía fuzzy
def update_fuzzy_controller(error):
    error_range = max(10, abs(error) * 2)
    error_fuzzy = ctrl.Antecedent(np.linspace(-error_range, error_range, 500), 'error')
    control = ctrl.Consequent(np.linspace(-10, 10, 500), 'control')

    error_fuzzy.automf(3)
    control.automf(3)

    rule1 = ctrl.Rule(error_fuzzy['poor'], control['good'])
    rule2 = ctrl.Rule(error_fuzzy['average'], control['average'])
    rule3 = ctrl.Rule(error_fuzzy['good'], control['poor'])

    control_system = ctrl.ControlSystem([rule1, rule2, rule3])
    return ctrl.ControlSystemSimulation(control_system)

# Inicialización del controlador fuzzy
fuzzy_controller = update_fuzzy_controller(0)

# Controlador de modos deslizantes fuzzy adaptativo
def adaptive_fuzzy_sliding_control(x, r, fuzzy_controller):
    e = x[0] - r[0]
    de = x[1] - r[1]
    s = e + de

    fuzzy_controller.input['error'] = e
    fuzzy_controller.compute()
    control_action = fuzzy_controller.output['control']

    # Ajustar la acción de control para mejorar la convergencia
    u = -control_action - k * np.sign(s)  # k es un parámetro de ganancia
    return u

# Vector de tiempo y parámetros
t = np.linspace(0, 10, 1000)
k = 2.0  # Ganancia del controlador

# Condiciones iniciales y referencia
x0 = np.array([0, 0])
r = np.array([1, 0])

# Simulación del sistema
x = np.zeros((len(t), 2))
u = np.zeros_like(t)

for i in range(1, len(t)):
    dt = t[i] - t[i - 1]
    if i % 50 == 0:
        fuzzy_controller = update_fuzzy_controller(x[i - 1, 0] - r[0])

    u[i] = adaptive_fuzzy_sliding_control(x[i - 1], r, fuzzy_controller)
    x[i] = x[i - 1] + dt * system_dynamics(x[i - 1], t[i], u[i])

# Gráficos
plt.figure(figsize=(12, 8))
plt.subplot(2, 1, 1)
plt.plot(t, x[:,0], 'b-', label='System Response')
plt.plot(t, [r[0]] * len(t), 'r--', label='Reference')
plt.ylabel('Position')
plt.title('Adaptive Fuzzy Sliding Mode Control Response')
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(t, u, 'k-', label='Control Signal')
plt.xlabel('Time')
plt.ylabel('Control')
plt.title('Control Signal')
plt.legend()

plt.tight_layout()
plt.show()
